---
import FullWidthWidgetWrapper from '~/components/ui/FullWidthWidgetWrapper.astro';
import type { LocationMap as Props } from '~/types';
// Define map styles
const MAP_STYLES = {
  light: 'https://basemaps.cartocdn.com/gl/positron-gl-style/style.json',
  dark: 'https://basemaps.cartocdn.com/gl/dark-matter-gl-style/style.json',
};
// Default values for props
const {
  latitude,
  longitude,
  zoom = 15,
  markerColor = '#fc8500',
  containerHeight = '100px',
  mapStyle = 'light',
  id,
  isDark,
} = Astro.props;
// Generate unique ID for the map container
const mapId = `map-${Math.random().toString(36).substring(2, 9)}`;
---

<FullWidthWidgetWrapper id={id} isDark={isDark}>
  <div class="w-full overflow-hidden relative" style={`height: ${containerHeight};`}>
    <div id={mapId} class="w-full h-full"></div>
  </div>
</FullWidthWidgetWrapper>
<!-- Import MapLibre GL -->
<script>
  import maplibregl from 'maplibre-gl';
  import 'maplibre-gl/dist/maplibre-gl.css';
  // Expose maplibregl to window for our instance script
  window.maplibregl = maplibregl;
</script>
<!-- Initialize the map -->
<script define:vars={{ mapId, latitude, longitude, zoom, markerColor, mapStyle, MAP_STYLES }}>
  document.addEventListener('DOMContentLoaded', () => {
    const maplibregl = window.maplibregl;

    // Initialize map
    const map = new maplibregl.Map({
      container: mapId,
      style: MAP_STYLES[mapStyle],
      center: [longitude, latitude],
      zoom: zoom,
      attributionControl: true,
      scrollZoom: false,
      attributionControl: false,
    });

    // Add navigation controls
    map.addControl(new maplibregl.NavigationControl(), 'top-right');

    const el = document.createElement('div');
    el.className =
      'w-6 h-6 rounded-full bg-[#fc8500] shadow-md relative before:absolute before:w-3 before:h-3 before:bg-[#fc8500] before:rotate-45 before:-bottom-0.5 before:left-1/2 before:-translate-x-1/2';
    el.style.backgroundColor = markerColor;
    el.style.transform = 'translate(-50%, -100%)';
    el.style.marginTop = '-10px';

    // Add marker to map
    new maplibregl.Marker({
      element: el,
      anchor: 'bottom',
    })
      .setLngLat([longitude, latitude])
      .addTo(map);

    // Configure drag pan behavior for different input types
    const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;

    if (isTouchDevice) {
      // On touch devices, disable drag pan initially
      map.dragPan.disable();

      // Enable drag pan with two fingers for touch devices
      map.on('touchstart', (e) => {
        if (e.points && e.points.length >= 2) {
          map.dragPan.enable();
        }
      });

      // Disable drag pan when touch ends
      map.on('touchend', () => {
        map.dragPan.disable();
      });
    } else {
      // On non-touch devices (mouse interaction), keep drag pan enabled
      map.dragPan.enable();
    }
  });
</script>
