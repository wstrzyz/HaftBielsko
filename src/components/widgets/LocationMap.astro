---
interface Props {
  latitude: number;
  longitude: number;
  zoom?: number;
  title: string;
  address?: string;
  hours?: string;
  phone?: string;
  website?: string;
  markerImage?: string;
  markerWidth?: number;
  markerHeight?: number;
  markerColor?: string;
  popupWidth?: number;
  primaryColor?: string;
  secondaryColor?: string;
  showPopupOnLoad?: boolean;
  containerClass?: string;
  containerHeight?: string;
  markerScale?: number;
  scrollZoom?: boolean;
  dragPan?: boolean;
  navigationControls?: boolean;
  mapStyle?: string;
  apiKey?: string;
}

// Map style options (for reference)
const MAP_STYLES = {
  // Free styles that don't require API keys
  CARTO_VOYAGER: 'https://basemaps.cartocdn.com/gl/voyager-gl-style/style.json', // Street map with labels
  CARTO_POSITRON: 'https://basemaps.cartocdn.com/gl/positron-gl-style/style.json', // Light map
  CARTO_DARK_MATTER: 'https://basemaps.cartocdn.com/gl/dark-matter-gl-style/style.json', // Dark map
};

// Default values for props
const {
  latitude,
  longitude,
  zoom = 15,
  title,
  address = '',
  hours = '',
  phone = '',
  website = '',
  markerImage = '',
  markerWidth = 40,
  markerHeight = 40,
  markerColor = '#4285F4',
  popupWidth = 300,
  primaryColor = '#4285F4',
  secondaryColor = '#333333',
  showPopupOnLoad = false,
  containerClass = '',
  containerHeight = '400px',
  markerScale = 1.0,
  scrollZoom = false,
  dragPan = true,
  navigationControls = true,
  mapStyle = MAP_STYLES.CARTO_POSITRON, // Default to CARTO Voyager (streets)
  apiKey = '',
} = Astro.props;

// Generate unique ID for the map container
const mapId = `map-${Math.random().toString(36).substring(2, 9)}`;
---

<!-- Make the map container use the intersect classes -->
<div class={`map-container ${containerClass} intersect intersect-once`} data-map-container>
  <div id={mapId} class="map-target"></div>
  <div class="map-placeholder">
    <div class="placeholder-content">
      <p>Map Loading...</p>
    </div>
  </div>
</div>

<!-- First script: Import and expose maplibregl -->
<script>
  // This script will be processed by Astro's build system
  import maplibregl from 'maplibre-gl';
  import 'maplibre-gl/dist/maplibre-gl.css';

  // Expose maplibregl to window for our instance script to use
  window.maplibregl = maplibregl;
</script>

<!-- Second script: Initialize map only when visible -->
<script
  define:vars={{
    mapId,
    latitude,
    longitude,
    zoom,
    title,
    address,
    hours,
    phone,
    website,
    markerImage,
    markerWidth,
    markerHeight,
    markerColor,
    popupWidth,
    primaryColor,
    secondaryColor,
    showPopupOnLoad,
    markerScale,
    scrollZoom,
    dragPan,
    navigationControls,
    mapStyle,
    apiKey,
  }}
>
  // Create a flag to track if the map has been initialized
  let mapInitialized = false;

  // Function to initialize the map
  function initializeMap() {
    if (mapInitialized) return;

    // At this point, maplibregl is available on window
    const maplibregl = window.maplibregl;

    // Determine the final style URL (add API key if needed)
    let styleUrl = mapStyle;
    if (apiKey && styleUrl.includes('maptiler')) {
      styleUrl = `${styleUrl}?key=${apiKey}`;
    } else if (apiKey && styleUrl.includes('stadiamaps')) {
      styleUrl = `${styleUrl}?api_key=${apiKey}`;
    }

    // Initialize map with custom scroll behavior and style
    const map = new maplibregl.Map({
      container: mapId,
      style: styleUrl,
      center: [longitude, latitude],
      zoom: zoom,
      attributionControl: true,
      scrollZoom: scrollZoom,
      dragPan: dragPan,
      interactive: scrollZoom || dragPan,
    });

    // Remove placeholder when map loads
    map.on('load', () => {
      const container = document.getElementById(mapId).closest('[data-map-container]');
      const placeholder = container.querySelector('.map-placeholder');
      if (placeholder) {
        placeholder.style.opacity = '0';
        setTimeout(() => {
          placeholder.style.display = 'none';
        }, 300);
      }
    });

    // Add navigation controls if enabled
    if (navigationControls) {
      map.addControl(new maplibregl.NavigationControl(), 'top-right');
    }

    // Create popup content with styling
    const popupContent = `
      <div style="padding: 12px; text-align: center; font-family: system-ui, -apple-system, sans-serif;">
        <h3 style="margin-bottom: 8px; color: ${secondaryColor}; font-weight: 600;">${title}</h3>
        ${address ? `<p style="margin: 5px 0; color: #555;">${address}</p>` : ''}
        ${hours ? `<p style="margin: 5px 0; color: #555;">${hours}</p>` : ''}
        ${
          phone
            ? `<a href="tel:${phone.replace(/[^0-9+]/g, '')}" style="color: ${primaryColor}; display: block; margin-top: 8px; text-decoration: none; font-weight: 500;">
          üìû ${phone}
        </a>`
            : ''
        }
        ${
          website
            ? `<a href="${website}" target="_blank" style="color: ${primaryColor}; display: block; margin-top: 8px; text-decoration: none; font-weight: 500;">
          üåê Visit Website
        </a>`
            : ''
        }
      </div>
    `;

    // Create the popup
    const popup = new maplibregl.Popup({
      offset: 25,
      closeButton: true,
      closeOnClick: false,
      maxWidth: `${popupWidth}px`,
    }).setHTML(popupContent);

    let marker;

    // Use custom image marker if provided, otherwise use default marker
    if (markerImage) {
      // Create custom element for marker
      const el = document.createElement('div');
      el.className = 'custom-marker';
      el.style.backgroundImage = `url(${markerImage})`;
      el.style.width = `${markerWidth}px`;
      el.style.height = `${markerHeight}px`;
      el.style.backgroundSize = 'contain';
      el.style.backgroundRepeat = 'no-repeat';
      el.style.backgroundPosition = 'center';
      el.style.transform = `scale(${markerScale})`;
      el.style.cursor = 'pointer';

      // Add marker to map
      marker = new maplibregl.Marker({
        element: el,
        anchor: 'bottom',
      })
        .setLngLat([longitude, latitude])
        .setPopup(popup)
        .addTo(map);
    } else {
      // Use standard marker with custom color
      marker = new maplibregl.Marker({
        color: markerColor,
        scale: markerScale,
      })
        .setLngLat([longitude, latitude])
        .setPopup(popup)
        .addTo(map);
    }

    // Show popup on load if requested
    if (showPopupOnLoad) {
      marker.togglePopup();
    }

    // Improve accessibility
    map.getCanvas().setAttribute('aria-label', `Map showing location of ${title}`);

    // Prevent focus stealing
    map.getCanvas().setAttribute('tabindex', '-1');

    // Mark as initialized
    mapInitialized = true;
  }

  // Set up a MutationObserver to detect when the container becomes visible
  // This works with your existing intersection observer script
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'attributes' && mutation.attributeName === 'no-intersect') {
        const container = document.getElementById(mapId).closest('[data-map-container]');
        if (!container.hasAttribute('no-intersect') && !mapInitialized) {
          // Container is now visible, initialize the map
          initializeMap();

          // We can disconnect once the map is initialized
          observer.disconnect();
        }
      }
    });
  });

  // Start observing the container
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById(mapId).closest('[data-map-container]');
    if (container) {
      observer.observe(container, { attributes: true });

      // If the container is already visible (no 'no-intersect' attribute)
      // initialize immediately
      if (!container.hasAttribute('no-intersect')) {
        initializeMap();
        observer.disconnect();
      }
    }
  });
</script>

<style define:vars={{ containerHeight }}>
  .map-container {
    width: 100%;
    height: var(--containerHeight);
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    position: relative;
    transition: opacity 0.3s ease;
  }

  .map-target {
    width: 100%;
    height: 100%;
  }

  .map-placeholder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #f5f5f5;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: opacity 0.3s ease;
    z-index: 1;
  }

  .placeholder-content {
    text-align: center;
    color: #666;
    font-size: 16px;
  }

  /* Target MapLibre controls */
  :global(.maplibregl-ctrl-attrib) {
    font-size: 10px;
  }

  /* Apply styles to all MapLibre controls */
  :global(.maplibregl-ctrl) {
    z-index: 2;
  }
</style>
